package Model;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;

import javax.swing.Timer;

public class Clock extends Observable implements ActionListener {
	
	private ClockState state;
	private Boolean a;
	private Boolean b;
	private Timer timer;
	public TimeManager time;
	
	public Clock() {
		state = ClockState.getInitialState();
		a = false;
		b = false;
		time = new TimeManager();

		timer = new Timer(100, this);
		startTimer();
	}
	
	/* 
	 * State related methods
	 */
	public void aPressed() {
		ClockState s = state.aPressed();
		a = true;
		if(s.status() == "Exibição") {
			state = s;
			startTimer();
		} else {
			state = s;
			stopTimer();
		}
	}
	
	public void bPressed() {
		ClockState s = state.bPressed();
		if(a == false && s.status() == "Ajusta hora") {
			time.incrementHour();
			int[] timeArray = {this.time.getSecond(),
			      	  this.time.getMinute(), 
			      	  this.time.getHour() };
			System.out.println(time.getHour());
			setChanged();
			notifyObservers(timeArray);
			return;
		}
		if(a == false && s == new SetMinuteState() ) {
			time.incrementMinute();
			int[] timeArray = {this.time.getSecond(),
			      	  this.time.getMinute(), 
			      	  this.time.getHour() };
			System.out.println(time.getMinute());
			setChanged();
			notifyObservers(timeArray);
			return;
		}
	}

	public void aReleased() {
		a = false;
	}
	
	public void bReleased() {
		b = false;
		
	}
	
	public Boolean a() {
		return a;
	}
	
	public Boolean b() {
		return b;
	}
	
	
	/* 
	 * Timer and time related methods
	 */
	private void startTimer() {
		timer.start();
	}
	
	private void stopTimer() {
		timer.stop();
	}
	

  @Override
  public void actionPerformed(ActionEvent actionEvent) {
	this.time.tenthOfSecond += 1;
	this.time.setSecond();
	int[] timeArray = {this.time.getSecond(),
	      	  		   this.time.getMinute(), 
	      	  		   this.time.getHour() };
	setChanged();
	notifyObservers(timeArray);

  }
	
	
}
